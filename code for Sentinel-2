// 1. Geometría 'lago' ya definida manualmente

// 2. Cargar colección Sentinel-2 Level-2A (con SCL)
var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterBounds(lago)
  .filterDate('2015-01-01', '2024-12-31')
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5));

// 3. Función para enmascarar nubes, sombras, nieve y otros
function maskCloudAndSnow(image) {
  var scl = image.select('SCL');
  var mask = scl.neq(8)  // nubes medianas
    .and(scl.neq(3))     // sombra
    .and(scl.neq(9))     // nubes altas
    .and(scl.neq(10))    // cirros
    .and(scl.neq(11))    // nieve
    .and(scl.neq(1))     // saturado
    .and(scl.eq(6));     // agua
  return image.updateMask(mask);
}

// 4. Función para calcular MNDWI con resampleo explícito de B11
function computeMNDWI(image) {
  var b3 = image.select('B3');
  var b11 = image.select('B11')
                 .resample('bilinear')
                 .reproject({crs: b3.projection()});
  var mndwi = b3.subtract(b11).divide(b3.add(b11)).rename('MNDWI');
  return image.addBands(mndwi).select('MNDWI')
    .copyProperties(image, ['system:time_start']);
}

// 5. Aplicar máscara y calcular MNDWI
var mndwiCollection = s2
  .map(maskCloudAndSnow)
  .map(computeMNDWI);

// 6. Binarizar MNDWI (>0.35 como agua, ajustable)
var binarized = mndwiCollection.map(function(image) {
  var bin = image.gt(0.55).rename('waterMask');
  return bin.copyProperties(image, ['system:time_start']);
});

// 7. Recorte a geometría del lago
var binarizedCropped = binarized.map(function(image) {
  return image.clip(lago);
});

// 8. Acumulación de ocurrencias de agua
var totalImages = binarizedCropped.size();
var sumWater = binarizedCropped.reduce(ee.Reducer.sum());

// 9. Calcular frecuencia de ocurrencia de agua
var waterFrequency = sumWater.divide(totalImages).rename('freq');

// 10. Filtrar por persistencia >= 20%
var waterPersistent = waterFrequency.gte(0.23).selfMask();

// 11. Poligonizar
var waterVector = waterPersistent.reduceToVectors({
  geometry: lago,
  geometryType: 'polygon',
  scale: 10,
  maxPixels: 1e10
});

// 12. Visualización
Map.centerObject(lago, 17);
Map.addLayer(waterFrequency, {min: 0, max: 1, palette: ['white', 'blue']}, 'Frecuencia Agua');
Map.addLayer(waterVector, {}, 'Polígono persistente');

// 13. Exportar a Drive como SHP
Export.table.toDrive({
  collection: waterVector,
  description: 'Poligono_agua_persistente_MNDWI_2',
  fileFormat: 'SHP'
});


// Histograma de frecuencias dentro de la geometría 'lago'
var histogram = ui.Chart.image.histogram({
  image: waterFrequency.updateMask(waterFrequency.gt(0.1)),  // <- Filtra valores > 0
  region: lago,
  scale: 10,
  minBucketWidth: 0.05
}).setOptions({
  title: 'Distribución de frecuencia de aparición de agua (> 0)',
  hAxis: {title: 'Frecuencia (0-1)'},
  vAxis: {title: 'Número de píxeles'},
  colors: ['#1f78b4']
});

print(histogram);

// Seleccioná una imagen representativa (por ejemplo, la mediana de toda la colección)
var mndwiMedian = mndwiCollection.median();  // ndwiCollection en este caso es con MNDWI

// Histograma de valores de MNDWI dentro del lago
var mndwiHist = ui.Chart.image.histogram({
  image: mndwiMedian,
  region: lago,
  scale: 10,
  minBucketWidth: 0.05
}).setOptions({
  title: 'Distribución de valores MNDWI en el lago',
  hAxis: {title: 'MNDWI'},
  vAxis: {title: 'Número de píxeles'},
  colors: ['green']
});

print(mndwiHist);

// 1. Reducir la región con histograma
var histoDict = ee.Image(mndwiMedian).reduceRegion({
  reducer: ee.Reducer.histogram({maxBuckets: 100}),
  geometry: lago,
  scale: 10,
  bestEffort: true
});

// 2. Extraer el histograma como un ee.Dictionary
var histogram = ee.Dictionary(histoDict.get('MNDWI'));

// Enmascarar valores menores a 0.1
var waterFrequencyMasked = waterFrequency.updateMask(waterFrequency.gt(0.1));

// Calcular los percentiles de los valores mayores a 0.01
var frecuencyStats = waterFrequencyMasked.reduceRegion({
  reducer: ee.Reducer.percentile([25, 50, 75]),
  geometry: lago,
  scale: 10,
  maxPixels: 1e10
});

print('Percentiles Frecuencia (>0.1)', frecuencyStats);
